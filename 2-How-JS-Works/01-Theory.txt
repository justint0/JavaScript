A High-Level Overview of JavaScript

- JavaScript is a high-level, prototype-based object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single-threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model.

- High-level: In a high-level language, you do not need to manage resources.

- Garbage collection: JavaScript engine automatically removes old, unused objects from memory.

- Interpreted or just-in-time compiled: The process of converting human-readable JavaScript code to machine code.

- Multi-paradigm: A paradigm is an approach to structuring code. JavaScript supports procedural programming, object-oriented programming, and functional programming.

- Prototype-based object-oriented: Objects are created by cloning another object.

- First-class functions: Functions can behave like variables.

- Dynamic: Data types become known at runtime.

- Single-threaded: JavaScript runs in a single thread, so it can only do one thing at a time.

- Non-blocking event loop: Event loop takes long running tasks, executes them in the background, and puts them back in the main thread once they are finished.


--------------------


The JavaScript Engine and Runtime

- The JavaScript Engine is a program that executes JavaScript code. Every engine has a call stack and heap.
    - Code is executed using execution contexts in the call stack.
    - Objects are stored in an unstructured memory pool called the heap.

- JavaScript is just-in-time compiled
    - Compiled: the entire code is converted to machine code at once and written to a binary file.
    - Interpreted: the interpreter executes the source code line by line.
    - Just-in-time compiled: the entire code is converted to machine code at once, then executed immediately.

- A runtime environment is where your program will be executed.
    - JS engine (call stack and heap)
    - Web APIs
    - Callback queue contains all the callback functions that are ready to be executed.
    - Event loop takes callback functions from the callback queue and puts them in the call stack to be executed.


--------------------


Execution Contexts and the Call Stack

- Execution Context is an environment where a piece of JavaScript is executed.
    - One global execution context
    - One execution context per function
    - Order of events: compilation, creation of global execution context, execution of top-level code, and execution of functions and waiting for callbacks

- What's Inside an Execution Context?
    - Variable environment
        - let, const, and var declarations
        - functions
        - arguments object (not available for arrow functions)
    - Scope chain
    - this keyword (not available for arrow functions)

- In a call stack, execution contexts are stacked on top of each other.


--------------------


Scope and the scope chain

- Scope: Space or environment in which a variable is declared
- Lexical scoping: Scope is controlled by placement of functions and blocks in the code

- Global scope
    - Outside of any function or block
    - Variables declared in global scope are accessible everywhere

- Function scope
    - Variables are only accessible inside functions

- Block scope
    - Variables (declared using let and const) are only accessible inside block
    - Functions are block scoped in strict mode
  
- If one scope needs to use a variable, but cannot find it in the current scope, it will look up in the scope chain and see if it can find the variable in a parent scope.


--------------------


Variable Environment: Hoisting and the TDZ

- Hoisting: Interpreter moves the declaration of functions, variables, and classes to the top of their scope, prior to execution.

- Temporal Dead Zone (TDZ) is the area of a block where a variable is inaccessible until the moment the computer completely initializes it with a value.

- Function declarations are hoisted with an initial value of the actual function. Variables declared with var are hoisted with an initial value of undefined. Variables declared with let and const are hoisted with an uninitialized value.


--------------------


The this keyword

- In JavaScript, the this keyword refers to an object. Which object depends on how this is being invoked (used or called)
    - In an object method, this refers to the object.
    - In a function, in strict mode, this is undefined.
    - In an event, this refers to the element that received the event
    - Arrow functions inherit the this from the parent scope.


--------------------


Regular Functions vs Arrow Functions

- Use function expressions for object methods and arrow functions inside of a method.


--------------------


Primitives vs Objects

- Objects (reference types) are stored in the heap. Changing a copied primitive does not modify the original primitive. Changing a property on a copied object modifies the original object. 

- Primitives (primitive types) are stored in execution contexts in the call stack. Changing a copied primitive does not modify the original primitive.


